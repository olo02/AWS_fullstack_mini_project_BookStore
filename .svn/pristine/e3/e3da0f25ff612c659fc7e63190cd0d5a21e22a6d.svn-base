package team1.service.impl;

import static team1.utils.BookStoreUtils.nextLine;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import static team1.utils.BookStoreUtils.*;
import team1.service.PublisherService;
import team1.vo.Publisher;



public class PublisherServiceImpl implements PublisherService {
	
	/**
	 * @author 양찬용
	 * @since 23/02/10
	 * @param 
	 * @return 기능 설명
	 * 싱글톤작업
	 */
	
	private static PublisherService publisherService = new PublisherServiceImpl();
	public static PublisherService getInstance() {
		return publisherService;
	}
	private PublisherServiceImpl() {}
	
	private List<Publisher> publishers = new ArrayList<Publisher>();
	private Publisher loginUser = null;

	
	public boolean isMe() {
		return loginUser.getPw().equals("입력받을 비밀번호");
	}
	
	/**
	 * @author 양찬용
	 * @since 23/02/11
	 * @param register
	 * @return 기능 설명
	 * 출판사 회원 가입
	 */
	
	@Override
	public void register() {
		String id = nextLine("id를 입력해주세요");
		if (findById(id) != null) {
			System.err.println("중복된 id입니다");
			return;
			}
		String pw = nextLine("pw를 입력해주세요");
		String name = nextLine("이름을 입력해주세요");
		String brn = nextLine("사업자등록번호 13자리를 입력해주세요 (-제외)");
		String level = "001";
		Publisher publisher = new Publisher(id, pw, name, brn, level);
		publishers.add(publisher);
		System.out.println("회원가입이 완료되었습니다");
	}
	
	/**
	 * @author 양찬용
	 * @since 23/02/11
	 * @param 
	 * @return 기능 설명
	 * Publisher 더미계정 생성 및 영속화 작업
	 */
	

	{
		try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("customer.ser"))) {
			publishers = (List<Publisher>) ois.readObject();	
		}
		catch (FileNotFoundException e) {
			publishers.add(new Publisher("wisdom", "1234", "위즈덤하우스", "1112233333", "010"));
			publishers.add(new Publisher("munhak", "1234", "위즈덤하우스", "1112244444", "010"));
			publishers.add(new Publisher("dsstore", "1234", "위즈덤하우스", "1112255555", "010"));
			publishers.add(new Publisher("factory9", "1234", "위즈덤하우스", "1112266666", "010"));
			publishers.add(new Publisher("changbi", "1234", "위즈덤하우스", "1112277777", "010"));
		}
		catch(IOException | ClassNotFoundException e) {
		e.printStackTrace();
		}
	}
	
	/**
	 * @author 양찬용
	 * @since 23/02/11
	 * @param modify
	 * @return 기능 설명
	 * Publisher 정보 수정
	 */
	
	@Override
	public void modify() {
		if(!equals(isMe())) {
		System.out.println("비밀번호가 다릅니다");
		return;
	}
	loginUser.setName(nextLine("변경할 이름을 입력하세요"));
	System.out.println("변경이 완료되었습니다.");
		
		
	}
	/**
	 * @author 양찬용
	 * @since 23/02/11
	 * @param remove
	 * @return 기능 설명
	 * Publisher 회원 탈퇴
	 */
	@Override
	public void remove() {
		int x = 0;
		x = nextInt("1. 회원탈퇴 2. 메인메뉴로");
		if(x == 1) {
			publishers.remove(findByPw(nextLine("비밀번호를 입력하세요")));
			System.out.println("회원 탈퇴가 완료되었습니다");
		}
		else if(x == 2) {
		System.out.println("메인메뉴로 이동합니다");
		}
		
	}
	/**
	 * @author 양찬용
	 * @since 23/02/11
	 * @param login
	 * @return 기능 설명
	 * Publisher 로그인
	 */
	
	@Override
	public void login() {
		String id = nextLine2("ID : ");
		String pw = nextLine2("PW : ");
		if(findById(id)==null) {
			System.out.println("존재하지 않는 id 입니다.");
			return;
		}else {
			if (findById(id).getPw().equals(pw)) {
				loginUser = findById(id);
				System.out.println("로그인 성공");
			}else {
				System.out.println("비밀번호를 틀리셨습니다");
				return;
			}
		}

		
	}
	@Override
	public Publisher findById(String id) {
		Publisher publisher = null;
		for(int i=0; i<publishers.size(); i++) {
			if(publishers.get(i).getId() == id) {
				break;
			}
		}
		return publisher;
	}
	@Override
	public Publisher findByPw(String pw) {
		Publisher publisher = null;
		for(int i=0; i<publishers.size(); i++) {
			if(publishers.get(i).getPw().equals(publisher)) {
				publisher = publishers.get(i);
				break;
			}
			
		}

		return publisher;
	}
	
	void save() {
		try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("publisher.ser"))) {
		oos.writeObject(publishers);
	
		}
	catch (IOException e) {
		e.printStackTrace();
		}
	}
	
}

package team1.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import team1.service.PaymentService;
import team1.vo.*;

public class PaymentServiceImpl implements PaymentService {
	private static PaymentService paymentService;
	private static List<Payment> paymentList = new ArrayList<>();

	// private List<Payment> payments = new ArrayList<Payment>();
	private int pIndex = 1;

	private PaymentServiceImpl() {}

	@Override
	public PaymentService getInstance() {
		return paymentService;
	}

	/**
	 * @param loginUser, address
	 * @return 기능 설명
	 * 입력한다(구매한다)
	 * @author 방한솔
	 * @since 23/02/08
	 */
	@Override
	public void purchase(Customer loginUser, String address) {
		if(loginUser == null)
		{
			System.err.println("고객정보 정보가 존재하지 않습니다.");
			return;
		}

		String inputAddress;

		if(address.equals("0")){
			inputAddress = loginUser.getAddress();
		} else {
			inputAddress = address;
		}

		for(Order o : loginUser.getCart().getOrderList()) {
			if(o.getQuantity() > o.getBook().getStock())
				System.out.println("책의 재고 숫자가 부족합니다.");
				return;
		}

		Payment p = new Payment(pIndex++, loginUser, loginUser.getCart().getOrderList(), inputAddress, PaymentStatus.PENDING, new Date());

		for(Order o : loginUser.getCart().getOrderList()) {
			Book orderBook = o.getBook();
			orderBook.setStock(orderBook.getStock() - o.getQuantity());
		}

		paymentList.add(p);
	}

	/**
	 * @author 방한솔
	 * @since 23/02/08
	 * @param paymentId
	 * @return 기능 설명
	 * 조회한다(주문내역 조회한다)
	 */
	@Override
	public Payment findBy(int paymentId) {
		for(Payment p : paymentList) {
			if(paymentId == p.getPid()) {
				display(p);
				return p;
			}
		}
		return null;
	}


	/**
	 * @author 방한솔
	 * @since 23/02/08
	 * @param paymentId
	 * @return 기능 설명
	 * 삭제한다(환불처리, 실제 삭제 X)
	 */
	@Override
	public void refund(Customer customer, int paymentId) {
		Payment p = findBy(paymentId);
		if(p == null) {
			System.err.println("주문정보가 존재하지 않습니다!");
		}

		for(Order o : customer.getCart().getOrderList()) {
			Book orderBook = o.getBook();
			orderBook.setStock(orderBook.getStock() + o.getQuantity());
		}
		
		// p.getBookList() : 주문한 책 리스트
		// bookStock : 전체 책 리스트
			/*
		for(Book b : p.getBookList()) {
			for(int i = 0 ; i < bookStocks.size() ; i++) {
				//if(b.getbId() == bookStocks.get(i).getbId()) {
					Book updateBook = bookStocks.get(i);
					// 재고 수정
					// updateBook.setStock(paymentId);
					bookStocks.set(i, updateBook);
				//}
			}
		}
*/
	}

	/**
	 * 결제 상세 내용을 콘솔에 출력한다.
	 * @author 방한솔
	 * @since 23/02/08
	 * @param p
	 * 메서드 생성
	 *
	 * @since 23/02/12
	 * 주문자, 주문 상세내역 추가 및 메서드 수정
	 */
	@Override
	public void display(Payment p) {
		System.out.println("=============================");
		System.out.println("주문 번호 : " + p.getPid());
		System.out.println("주문자 : " + p.getCustomer().getName());
		System.out.println("구매날짜 : " + p.getRegDate());
		for(Order o : p.getOrderList()) {
			System.out.println("제목 : " + o.getBook().getTitle());
			System.out.println("출판사 : " + o.getBook().getPublisher());
			System.out.println("가격 : " + o.getBook().getPrice());
			System.out.println("수량 : " + o.getQuantity());
		}
		System.out.println("총합 : " + p.getTotalPrice());
		System.out.println("=============================");
		
	}

	/**
	 * @author 방한솔
	 * @since 23/02/08
	 * 전체 결제 리스트를 출력한다.
	 */
	@Override
	public void list() {
		for (Payment payment : paymentList) {
			display(payment);
		}
	}

	public void list(PaymentStatus paymentStatus){
		for (Payment payment : paymentList) {
			if(payment.getStatus() == paymentStatus)
				display(payment);
		}
	}

	public void list(Customer customer) {
		for (Payment payment : paymentList) {
			if(payment.getCustomer().getId().equals(customer.getId()))
				display(payment);
		}
	}

}
